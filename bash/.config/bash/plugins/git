#
# Public

git_on()
{
	__GIT_PRETTY_STATUS_ON=1
}

git_off()
{
	__GIT_PRETTY_STATUS_ON=0
}

__git_pretty_status()
{
	git rev-parse --is-inside-work-tree > /dev/null 2>&1
	[[ $? != 0 || $__GIT_PRETTY_STATUS_ON == 0 ]] && return

	printf '  '
	__git_head_state
	__git_changes_summary
}

#
# Private

__GIT_PRETTY_STATUS_ON=1

__GIT_ICON='󰊢'
__GIT_ICON_MERGE=''
__GIT_ICON_REBASE=''
__GIT_ICON_CHERRY=''
__GIT_ICON_BISECT=' '
__GIT_ICON_CHANGES='󰈙' # 󰈙 󰈤 󱔗 󰧮 󱔘 
__GIT_ICON_DELIMITER=''

__GIT_TS_CLEAR='\e[0m'
__GIT_TS_ICON='\e[0m'
__GIT_TS_ICON_BAD='\e[31m'
__GIT_TS_ICON_DETACHED='\e[33m'
__GIT_TS_ICON_BISECT='\e[34m'
__GIT_TS_ICON_CHANGES_UNSTAGED='\e[35m'
__GIT_TS_ICON_CHANGES_STAGED='\e[32m'
__GIT_TS_ICON_CHANGES_SOME_STAGED='\e[33m'
__GIT_TS_ICON_CHANGES_CONFLICTS='\e[32m'
__GIT_TS_CHANGES_UNSTAGED='\e[35m'
__GIT_TS_CHANGES_STAGED='\e[32m'
__GIT_TS_CHANGES_CONFLICTS='\e[31m'
__GIT_TS_NOT_SYNCED='\e[33m'
__GIT_TS_CONFLICTS='\e[35m'
__GIT_TS_MESSAGE='\e[33m'

__GIT_MESSAGE_MAX_LENGTH=20

__git_is_synced()
{
	local branch=$(git branch --show-current --no-color)
	local output=$(git branch --format='%(refname) %(upstream)' | grep "^refs/heads/$branch")
	local output="${output#* }"

	[[ -z "$output" ]] && return

	local remote_branch="${output#refs/remotes/}"
	local local_head=$(git rev-parse "$branch")
	local remote_head=$(git rev-parse "$remote_branch")

	[[ $local_head == $remote_head ]]
}

__git_is_detached_head()
{
	local output=$(git branch --show-current)
	[[ -z "$output" ]]
}

__GIT_STATUS_SYNCED=1
__GIT_STATUS_NOT_SYNCED=2
__GIT_STATUS_MERGE=3
__GIT_STATUS_REBASE=4
__GIT_STATUS_CHERRY=5
__GIT_STATUS_BISECT=6
__GIT_STATUS_DETACHED=7
__GIT_STATUS_RETURN__HEAD=''
__GIT_STATUS_RETURN__FROM=''
__GIT_STATUS_RETURN__TO=''
__git_status()
{
	local git_dir=$1

	__GIT_STATUS_RETURN__HEAD=''
	__GIT_STATUS_RETURN__FROM=''
	__GIT_STATUS_RETURN__TO=''

	if [[ -f "$git_dir/MERGE_HEAD" ]]
	then
		__GIT_STATUS_RETURN__FROM=$(git name-rev --name-only $(cat "$git_dir/MERGE_HEAD"))
		__GIT_STATUS_RETURN__TO=$(__git_head)
		return $__GIT_STATUS_MERGE
	elif [[ -d "$git_dir/rebase-merge" ]]
	then
		local hash=$(cat "$git_dir/rebase-merge/stopped-sha")
		local name=$(git name-rev --name-only "$hash")
		local message=$(__git_message "$hash")

		__GIT_STATUS_RETURN__FROM=$(printf "$name ${__GIT_TS_MESSAGE}\"$message\"${__GIT_TS_CLEAR}")
		__GIT_STATUS_RETURN__TO=$(git name-rev --name-only $(cat "$git_dir/rebase-merge/onto"))
		return $__GIT_STATUS_REBASE
	elif [[ -d "$git_dir/rebase-apply" ]]
	then
		local hash=$(cat "$git_dir/REBASE_HEAD")
		local name=$(git name-rev --name-only "$hash")
		local message=$(__git_message "$hash")

		__GIT_STATUS_RETURN__FROM=$(printf "$name ${__GIT_TS_MESSAGE}\"$message\"${__GIT_TS_CLEAR}")
		__GIT_STATUS_RETURN__TO=$(git name-rev --name-only $(cat "$git_dir/HEAD"))
		return $__GIT_STATUS_REBASE
	elif [[ -f "$git_dir/CHERRY_PICK_HEAD" ]]
	then
		local hash=$(cat "$git_dir/CHERRY_PICK_HEAD")
		local name=$(git name-rev --name-only "$hash")
		local message=$(__git_message "$hash")

		__GIT_STATUS_RETURN__FROM=$(printf "$name ${__GIT_TS_MESSAGE}\"$message\"${__GIT_TS_CLEAR}")
		__GIT_STATUS_RETURN__TO=$(__git_head)
		return $__GIT_STATUS_CHERRY
	elif [[ -f "$git_dir/BISECT_LOG" ]]
	then
		__GIT_STATUS_RETURN__HEAD=$(__git_head)
		return $__GIT_STATUS_BISECT
	elif __git_is_detached_head
	then
		__GIT_STATUS_RETURN__HEAD=$(__git_head)
		return $__GIT_STATUS_DETACHED
	fi

	__GIT_STATUS_RETURN__HEAD=$(__git_head)
	__git_is_synced
	if [[ $? == 0 ]]
	then
		return $__GIT_STATUS_SYNCED
	else
		return $__GIT_STATUS_NOT_SYNCED
	fi
}

__git_head()
{
	local head=$(git branch --show-current --no-color 2> /dev/null)
	if [[ -n "$head" ]]
	then
		printf "$head"
		return
	else
		local hash=$(git rev-parse --short HEAD)
		local message=$(__git_message "$hash")
		printf "$hash ${__GIT_TS_MESSAGE}\"$message\"${__GIT_TS_CLEAR}"
	fi
}

__git_message()
{
	local hash=$1

	local message=$(git show -s --format='%s' "$hash")
	[[ ${#message} -gt $__GIT_MESSAGE_MAX_LENGTH ]] && message="${message:0:$__GIT_MESSAGE_MAX_LENGTH}…"
	printf '%s' "$message"
}

__git_head_state()
{
	local git_dir=$(git rev-parse --git-dir)
	__git_status "$git_dir"
	case $? in
		$__GIT_STATUS_SYNCED)
			printf "${__GIT_ICON} %s" "$__GIT_STATUS_RETURN__HEAD"
			;;

		$__GIT_STATUS_NOT_SYNCED)
			printf "${__GIT_ICON} ${__GIT_TS_NOT_SYNCED}%s${__GIT_TS_CLEAR}" "$__GIT_STATUS_RETURN__HEAD"
			;;

		$__GIT_STATUS_MERGE)
			printf "${__GIT_TS_ICON_BAD}${__GIT_ICON} ${__GIT_TS_CONFLICTS}%s ${__GIT_TS_ICON_BAD}${__GIT_ICON_MERGE} ${__GIT_TS_CONFLICTS}%s${__GIT_TS_CLEAR}" "$__GIT_STATUS_RETURN__TO" "$__GIT_STATUS_RETURN__FROM"
			;;

		$__GIT_STATUS_REBASE)
			printf "${__GIT_TS_ICON_BAD}${__GIT_ICON} ${__GIT_TS_CONFLICTS}%s ${__GIT_TS_ICON_BAD}${__GIT_ICON_REBASE} ${__GIT_TS_CONFLICTS}%s${__GIT_TS_CLEAR}" "$__GIT_STATUS_RETURN__TO" "$__GIT_STATUS_RETURN__FROM"
			;;

		$__GIT_STATUS_CHERRY)
			printf "${__GIT_TS_ICON_BAD}${__GIT_ICON}${__GIT_TS_CLEAR} ${__GIT_TS_CONFLICTS}%s ${__GIT_TS_ICON_BAD}${__GIT_ICON_CHERRY} ${__GIT_TS_CONFLICTS}%s${__GIT_TS_CLEAR}" "$__GIT_STATUS_RETURN__TO" "$__GIT_STATUS_RETURN__FROM"
			;;

		$__GIT_STATUS_BISECT)
			printf "${__GIT_TS_ICON_DETACHED}${__GIT_ICON}${__GIT_TS_CLEAR} %s ${__GIT_ICON_BISECT}" "$__GIT_STATUS_RETURN__HEAD"
			;;

		$__GIT_STATUS_DETACHED)
			printf "${__GIT_TS_ICON_DETACHED}${__GIT_ICON}${__GIT_TS_CLEAR} %s" "$__GIT_STATUS_RETURN__HEAD"
			;;
	esac
}

__git_character_at()
{
	local index=$1

	local line
	while IFS= read -r line || [[ -n $line ]]
	do
		local state="${line:$index:1}"
		[[ $state != ' ' ]] && printf '%s\n' "$state"
	done
}

__git_pretty_file_count()
{
	local style=$1
	local counts=$2

	local line
	while IFS= read -r line || [[ -n $line ]]
	do
		local count
		local state
		read -r count state <<< "$line"
		printf " ${style}%d%s${__GIT_TS_CLEAR}" $count $state
	done <<< "$counts"
}

__git_changes_summary()
{
	local status=$(git status -s 2> /dev/null)
	local unstaged=$(grep '^\([^U][ACDMRTU]\|??\)' -o <<< "$status" | __git_character_at 1 | sort | uniq -c)
	local staged=$(grep '^[ACDMRTU][^U]' -o <<< "$status" | __git_character_at 0 | sort | uniq -c)
	local conflicts=$(grep '^UU' -o <<< "$status" | sort | uniq -c)

	if [[ -n $unstaged && -z $staged || -n $conflicts ]] 
	then
		printf "  ${__GIT_TS_ICON_CHANGES_UNSTAGED}${__GIT_ICON_CHANGES}${__GIT_TS_CLEAR}"
	elif [[ -z $unstaged && -n $staged ]] 
	then
		printf "  ${__GIT_TS_ICON_CHANGES_STAGED}${__GIT_ICON_CHANGES}${__GIT_TS_CLEAR}"
	elif [[ -n $unstaged && -n $staged ]]
	then
		printf "  ${__GIT_TS_ICON_CHANGES_SOME_STAGED}${__GIT_ICON_CHANGES}${__GIT_TS_CLEAR}"
	fi

	[[ -n $conflicts ]] && __git_pretty_file_count "${__GIT_TS_CHANGES_CONFLICTS}" "$conflicts"
	[[ -n $conflicts && -n $unstaged ]] && printf " ${__GIT_ICON_DELIMITER}"
	[[ -n $unstaged ]] && __git_pretty_file_count "${__GIT_TS_CHANGES_UNSTAGED}" "$unstaged"
	[[ -n $unstaged && -n $staged ]] && printf " ${__GIT_ICON_DELIMITER}"
	[[ -n $staged ]] && __git_pretty_file_count "${__GIT_TS_CHANGES_STAGED}" "$staged"
}

